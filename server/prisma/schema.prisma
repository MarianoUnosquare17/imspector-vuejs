generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model accounts {
  account_id            Int                     @id(map: "accounts_pk") @default(autoincrement())
  username              String?
  email                 String?
  password              String?
  player_match_comments player_match_comments[]
  players               players[]
  tactics               tactics[]
}

model agents {
  agent_id       Int              @id(map: "agents_pk") @default(autoincrement())
  name           String?
  player_matches player_matches[]
  tactics        tactics[]
}

model flyway_schema_history {
  installed_rank Int      @id(map: "flyway_schema_history_pk")
  version        String?  @db.VarChar(50)
  description    String   @db.VarChar(200)
  type           String   @db.VarChar(20)
  script         String   @db.VarChar(1000)
  checksum       Int?
  installed_by   String   @db.VarChar(100)
  installed_on   DateTime @default(now()) @db.Timestamp(6)
  execution_time Int
  success        Boolean

  @@index([success], map: "flyway_schema_history_s_idx")
}

model maps {
  map_id         Int              @id(map: "maps_pk") @default(autoincrement())
  name           String?
  player_matches player_matches[]
  tactics        tactics[]
}

model player_match_comments {
  comment_id      Int             @id(map: "comments_pk") @default(autoincrement())
  comment         String?
  date_created    DateTime?       @db.Timestamp(6)
  player_match_id Int?
  created_by      Int?
  accounts        accounts?       @relation(fields: [created_by], references: [account_id], onDelete: NoAction, onUpdate: NoAction, map: "player_match_comments_accounts_account_id")
  player_matches  player_matches? @relation(fields: [player_match_id], references: [player_match_id], onDelete: NoAction, onUpdate: NoAction, map: "player_match_comments_player_matches_player_match_id")
}

model player_match_modes {
  player_match_mode_id Int              @id(map: "modes_pk") @default(autoincrement())
  name                 String?
  player_matches       player_matches[]
}

model player_matches {
  player_match_id       Int                     @id(map: "player_matches_pk") @default(autoincrement())
  score                 Int?
  date_played           DateTime?               @db.Timestamp(6)
  kills                 Int?
  deaths                Int?
  assists               Int?
  money_spent           Int?
  bodyshots             Int?
  headshots             Int?
  legshots              Int?
  map_id                Int?
  agent_id              Int?
  player_id             Int?
  player_match_mode_id  Int?
  player_match_comments player_match_comments[]
  agents                agents?                 @relation(fields: [agent_id], references: [agent_id], onDelete: NoAction, onUpdate: NoAction, map: "player_matches_agents_agent_id")
  maps                  maps?                   @relation(fields: [map_id], references: [map_id], onDelete: NoAction, onUpdate: NoAction, map: "player_matches_maps_map_id")
  player_match_modes    player_match_modes?     @relation(fields: [player_match_mode_id], references: [player_match_mode_id], onDelete: NoAction, onUpdate: NoAction, map: "player_matches_player_match_modes_player_match_mode_id")
  players               players?                @relation(fields: [player_id], references: [player_id], onDelete: NoAction, onUpdate: NoAction, map: "player_matches_players_player_id")
}

model players {
  player_id        Int              @id(map: "players_pk") @default(autoincrement())
  valorant_account String?
  valorant_tag     String?
  region           String?
  level            Int?
  account_id       Int?
  player_matches   player_matches[]
  accounts         accounts?        @relation(fields: [account_id], references: [account_id], onDelete: NoAction, onUpdate: NoAction, map: "players_accounts_account_id")
}

model tactics {
  tactic_id  Int       @id(map: "tactics_pk") @default(autoincrement())
  tactic     String?
  map_id     Int?
  agent_id   Int?
  created_by Int?
  accounts   accounts? @relation(fields: [created_by], references: [account_id], onDelete: NoAction, onUpdate: NoAction, map: "tactics_accounts_account_id")
  agents     agents?   @relation(fields: [agent_id], references: [agent_id], onDelete: NoAction, onUpdate: NoAction, map: "tactics_agents_agent_id")
  maps       maps?     @relation(fields: [map_id], references: [map_id], onDelete: NoAction, onUpdate: NoAction, map: "tactics_maps_map_id")
}
